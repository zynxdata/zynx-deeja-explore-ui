name: Zynx AGI CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Backend Tests
  backend-tests:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Create logs directory
      run: mkdir -p logs
    
    - name: Run backend tests with coverage
      run: |
        pytest test_main.py -v --cov=main --cov-report=xml --cov-report=html --cov-fail-under=80
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

  # Frontend Tests
  frontend-tests:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linting
      run: npm run lint
    
    - name: Run type checking
      run: npx tsc --noEmit
    
    - name: Build frontend
      run: npm run build

  # Documentation Generation
  docs:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    defaults:
      run:
        working-directory: ./backend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Generate API documentation
      run: |
        mkdir -p docs
        # Generate OpenAPI spec
        curl -s http://localhost:8000/openapi.json > docs/openapi.json || echo "API docs generation failed"
    
    - name: Upload documentation artifacts
      uses: actions/upload-artifact@v3
      with:
        name: api-docs
        path: docs/

  # Docker Build and Test
  docker:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build and test backend Docker image
      run: |
        cd backend
        docker build -t zynx-agi-backend .
        docker run --rm -d --name test-backend -p 8000:8000 zynx-agi-backend
        sleep 10
        curl -f http://localhost:8000/health || exit 1
        docker stop test-backend
    
    - name: Build frontend Docker image
      run: |
        docker build -f Dockerfile.frontend -t zynx-agi-frontend .

  # Deploy to Development (on main branch)
  deploy-dev:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, docs, docker]
    if: github.ref == 'refs/heads/main'
    environment: development
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to development environment
      run: |
        echo "Deploying to development environment..."
        # Add your deployment logic here
        # Example: docker-compose up -d
        echo "Development deployment completed"

  # Security Scan
  security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'