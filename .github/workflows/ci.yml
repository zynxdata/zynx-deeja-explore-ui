name: Zynx AGI CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # Lint and Test Backend
  backend:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Lint with flake8
      run: |
        cd backend
        pip install flake8
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Test with pytest
      run: |
        cd backend
        pytest test_main.py -v --cov=main --cov-report=xml --cov-report=html
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

  # Lint and Test Frontend
  frontend:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Lint with ESLint
      run: npm run lint
    
    - name: Build frontend
      run: npm run build
    
    - name: Test frontend
      run: |
        npm install -g serve
        npm run build
        timeout 30s serve -s dist -l 3000 &
        sleep 10
        curl -f http://localhost:3000 || exit 1

  # Build Documentation
  docs:
    runs-on: ubuntu-latest
    needs: [backend, frontend]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install backend dependencies
      run: |
        cd backend
        pip install -r requirements.txt
    
    - name: Generate API documentation
      run: |
        cd backend
        python -c "
        import uvicorn
        from main import app
        import json
        openapi_schema = app.openapi()
        with open('openapi.json', 'w') as f:
            json.dump(openapi_schema, f, indent=2)
        print('OpenAPI schema generated')
        "
    
    - name: Upload API docs
      uses: actions/upload-artifact@v3
      with:
        name: api-docs
        path: backend/openapi.json

  # Docker Build and Test
  docker:
    runs-on: ubuntu-latest
    needs: [backend, frontend]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build backend image
      run: |
        cd backend
        docker build -t zynx-agi-backend .
    
    - name: Build frontend image
      run: |
        docker build -f Dockerfile.frontend -t zynx-agi-frontend .
    
    - name: Test Docker containers
      run: |
        docker-compose up -d
        sleep 30
        curl -f http://localhost:8000/health || exit 1
        curl -f http://localhost:5173 || exit 1
        docker-compose down

  # Deploy (Optional - for main branch)
  deploy:
    runs-on: ubuntu-latest
    needs: [backend, frontend, docs, docker]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "Deployment would happen here"
        echo "Backend: http://localhost:8000"
        echo "Frontend: http://localhost:5173"
        echo "API Docs: http://localhost:8000/docs"
    
    - name: Notify deployment
      run: |
        echo "‚úÖ Zynx AGI deployment successful!"
        echo "üåê Frontend: http://localhost:5173"
        echo "üîß Backend: http://localhost:8000"
        echo "üìö API Docs: http://localhost:8000/docs"
        echo "üìä Coverage: Available in artifacts"