
import { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Progress } from '@/components/ui/progress';
import { Brain, Target, BookOpen, MessageSquare, Dna, Shuffle, CheckCircle, XCircle, Trophy, Crown, Users } from 'lucide-react';
import { useAuth } from '@/components/auth/AuthProvider';
import { useGameData } from '@/hooks/useGameData';
import { PlayerSetup } from '@/components/game/PlayerSetup';
import { Leaderboard } from '@/components/game/Leaderboard';

interface Algorithm {
  id: string;
  name: string;
  category: string;
  description: string;
  zynxScenario: string;
  difficulty: 'easy' | 'medium' | 'hard';
  icon: string;
}

interface GameStats {
  score: number;
  correctAnswers: number;
  totalQuestions: number;
  currentStreak: number;
  bestStreak: number;
}

const algorithms: Algorithm[] = [
  // üéØ Reinforcement Learning
  { id: 'ppo', name: 'PPO', category: 'reinforcement', description: 'Proximal Policy Optimization', zynxScenario: 'Deeja ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ', difficulty: 'hard', icon: 'üéØ' },
  { id: 'q-learning', name: 'Q-Learning', category: 'reinforcement', description: 'Value-based reinforcement learning', zynxScenario: '‡∏£‡∏∞‡∏ö‡∏ö Context Engine ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡πÅ‡∏ö‡∏ö‡πÑ‡∏´‡∏ô‡πÉ‡∏´‡πâ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå', difficulty: 'medium', icon: 'üéØ' },
  { id: 'actor-critic', name: 'Actor-Critic', category: 'reinforcement', description: 'Combines value and policy-based methods', zynxScenario: 'Zynx ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏î‡∏∏‡∏•‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏£‡∏ß‡∏à‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏ú‡∏•', difficulty: 'hard', icon: 'üéØ' },
  { id: 'dqn', name: 'Deep Q-Network', category: 'reinforcement', description: 'Deep learning for Q-learning', zynxScenario: '‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏≠‡∏±‡∏•‡∏Å‡∏≠‡∏£‡∏¥‡∏ó‡∏∂‡∏°‡∏Ç‡∏≠‡∏á Zynx ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏à‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô', difficulty: 'hard', icon: 'üéØ' },
  { id: 'mcts', name: 'Monte Carlo Tree Search', category: 'reinforcement', description: 'Tree search algorithm', zynxScenario: '‡πÄ‡∏°‡∏∑‡πà‡∏≠ Deeja ‡∏ï‡πâ‡∏≠‡∏á‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏´‡∏•‡∏≤‡∏¢‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ñ‡∏∂‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£', difficulty: 'hard', icon: 'üéØ' },

  // üß† Symbolic Reasoning
  { id: 'cbr', name: 'Case-Based Reasoning', category: 'symbolic', description: 'Reasoning using past cases', zynxScenario: 'Zynx Memory System ‡∏à‡∏î‡∏à‡∏≥‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏à‡∏≠‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏•‡∏∞‡∏ô‡∏≥‡∏°‡∏≤‡πÉ‡∏ä‡πâ‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Å‡∏±‡∏ô', difficulty: 'medium', icon: 'üß†' },
  { id: 'ilp', name: 'Inductive Logic Programming', category: 'symbolic', description: 'Learning logical rules', zynxScenario: '‡∏£‡∏∞‡∏ö‡∏ö Ethics Framework ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏Å‡∏é‡∏à‡∏£‡∏¥‡∏¢‡∏ò‡∏£‡∏£‡∏°‡∏à‡∏≤‡∏Å‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤', difficulty: 'hard', icon: 'üß†' },
  { id: 'bayesian-networks', name: 'Bayesian Networks', category: 'symbolic', description: 'Probabilistic graphical models', zynxScenario: '‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå ‡∏ß‡∏±‡∏í‡∏ô‡∏ò‡∏£‡∏£‡∏° ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡πÉ‡∏ô Context Engine', difficulty: 'medium', icon: 'üß†' },
  { id: 'rule-policy', name: 'Rule-based Policy Engine', category: 'symbolic', description: 'Decision making with rules', zynxScenario: 'Compliance Engine ‡∏Ç‡∏≠‡∏á Zynx ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡∏Ç‡∏≠‡∏á AI ‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡∏ï‡∏≤‡∏°‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£', difficulty: 'easy', icon: 'üß†' },

  // üìà Supervised Learning
  { id: 'random-forest', name: 'Random Forest', category: 'supervised', description: 'Ensemble of decision trees', zynxScenario: '‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô Emotional Context Module', difficulty: 'medium', icon: 'üìà' },
  { id: 'xgboost', name: 'XGBoost', category: 'supervised', description: 'Gradient boosting framework', zynxScenario: '‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏∂‡∏á‡∏û‡∏≠‡πÉ‡∏à‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á Deeja', difficulty: 'medium', icon: 'üìà' },
  { id: 'svm', name: 'Support Vector Machine', category: 'supervised', description: 'Maximum margin classifier', zynxScenario: '‡∏Å‡∏≤‡∏£‡πÅ‡∏¢‡∏Å‡πÅ‡∏¢‡∏∞‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å', difficulty: 'medium', icon: 'üìà' },
  { id: 'naive-bayes', name: 'Naive Bayes', category: 'supervised', description: 'Probabilistic classifier', zynxScenario: '‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏µ‡πà upload ‡πÄ‡∏Ç‡πâ‡∏≤ Zynx PDF Master', difficulty: 'easy', icon: 'üìà' },
  { id: 'knn', name: 'K-Nearest Neighbors', category: 'supervised', description: 'Instance-based learning', zynxScenario: '‡∏Å‡∏≤‡∏£‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Å‡∏±‡∏ô‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö Persona Engine', difficulty: 'easy', icon: 'üìà' },

  // üó£Ô∏è NLP / Translation
  { id: 'transformer', name: 'Transformer (GPT-4)', category: 'nlp', description: 'Attention-based neural network', zynxScenario: '‡πÅ‡∏Å‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á Deeja ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÅ‡∏•‡∏∞‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤', difficulty: 'hard', icon: 'üó£Ô∏è' },
  { id: 'bart', name: 'BART Summarization', category: 'nlp', description: 'Text summarization model', zynxScenario: '‡∏Å‡∏≤‡∏£‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏¢‡∏≤‡∏ß‡πÉ‡∏ô PDF Master ‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏∏‡∏î‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£', difficulty: 'medium', icon: 'üó£Ô∏è' },
  { id: 'marianmt', name: 'MarianMT Translation', category: 'nlp', description: 'Neural machine translation', zynxScenario: 'Context-Aware Translator ‡πÅ‡∏õ‡∏•‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢-‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏õ‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏í‡∏ô‡∏ò‡∏£‡∏£‡∏°', difficulty: 'medium', icon: 'üó£Ô∏è' },
  { id: 'whisper', name: 'Whisper ASR', category: 'nlp', description: 'Automatic speech recognition', zynxScenario: '‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Voice Chat ‡∏Å‡∏±‡∏ö Deeja', difficulty: 'medium', icon: 'üó£Ô∏è' },
  { id: 'bert', name: 'BERT', category: 'nlp', description: 'Bidirectional encoder representations', zynxScenario: '‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢‡∏•‡∏∂‡∏Å‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏Ç‡∏≠‡∏á Deeja', difficulty: 'hard', icon: 'üó£Ô∏è' },

  // üß¨ Bio-AI / Edge AI / Compliance
  { id: 'federated-learning', name: 'Federated Learning', category: 'bio-edge', description: 'Decentralized machine learning', zynxScenario: '‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏•‡∏≤‡∏¢‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏ä‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß', difficulty: 'hard', icon: 'üß¨' },
  { id: 'opa', name: 'Open Policy Agent', category: 'bio-edge', description: 'Policy engine for compliance', zynxScenario: '‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏ï‡∏≤‡∏°‡∏Å‡∏é‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏ô Zynx Enterprise', difficulty: 'medium', icon: 'üß¨' },
  { id: 'prometheus', name: 'Prometheus + Grafana', category: 'bio-edge', description: 'Monitoring and observability', zynxScenario: '‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Zynx ‡πÅ‡∏ö‡∏ö real-time', difficulty: 'medium', icon: 'üß¨' },
  { id: 'kubernetes-hpa', name: 'Kubernetes HPA', category: 'bio-edge', description: 'Horizontal pod autoscaling', zynxScenario: '‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î Zynx Context Engine ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ', difficulty: 'medium', icon: 'üß¨' },
  { id: 'edge-optimization', name: 'Edge AI Optimization', category: 'bio-edge', description: 'Optimizing AI for edge devices', zynxScenario: '‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô Deeja ‡∏ö‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï', difficulty: 'hard', icon: 'üß¨' },
];

const categories = [
  { id: 'all', name: '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î', icon: Brain, color: 'default' },
  { id: 'reinforcement', name: 'Reinforcement Learning', icon: Target, color: 'destructive' },
  { id: 'symbolic', name: 'Symbolic Reasoning', icon: Brain, color: 'secondary' },
  { id: 'supervised', name: 'Supervised Learning', icon: BookOpen, color: 'default' },
  { id: 'nlp', name: 'NLP / Translation', icon: MessageSquare, color: 'outline' },
  { id: 'bio-edge', name: 'Bio-AI / Edge AI / Compliance', icon: Dna, color: 'destructive' },
];

// Dynamic scenario generation templates
const scenarioTemplates = {
  contexts: [
    '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏´‡∏á‡∏∏‡∏î‡∏´‡∏á‡∏¥‡∏î‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏á‡∏≤‡∏ô',
    '‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ',
    '‡∏ú‡∏π‡πâ‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏£‡∏∏‡∏õ',
    '‡∏ô‡∏±‡∏Å‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏Å‡πâ‡∏ö‡∏±‡∏Ñ',
    '‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô',
    '‡∏ó‡∏µ‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
    '‡∏ô‡∏±‡∏Å‡∏ß‡∏¥‡∏à‡∏±‡∏¢‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î',
    '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏£‡∏∞‡∏ö‡∏ö',
    '‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å',
    '‡∏ó‡∏µ‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô'
  ],
  tasks: [
    '‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥',
    '‡πÅ‡∏õ‡∏•‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç',
    '‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏™‡πÄ‡∏õ‡∏£‡∏î‡∏ä‡∏µ‡∏ï',
    '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏á‡∏≤‡∏ô‡∏ô‡∏≥‡πÄ‡∏™‡∏ô‡∏≠',
    '‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ PDF',
    '‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥‡∏£‡∏∞‡∏¢‡∏∞‡∏¢‡∏≤‡∏ß',
    '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏ï‡∏≤‡∏°‡∏Å‡∏é‡∏´‡∏°‡∏≤‡∏¢',
    '‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö',
    '‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ',
    '‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°'
  ],
  systems: [
    'Deeja AI Chatbot',
    'Context-Aware Translator',
    'AI Spreadsheet Assistant',
    'Live Presentation Engine',
    'PDF Master System',
    'Memory Management Service',
    'Compliance Engine',
    'Performance Monitor',
    'User Analytics Platform',
    'Ethics Framework'
  ],
  challenges: [
    '‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡πÅ‡∏•‡∏∞‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°',
    '‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏í‡∏ô‡∏ò‡∏£‡∏£‡∏°‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•',
    '‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏´‡∏≤‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°',
    '‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ï‡∏≤‡∏°‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢',
    '‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô',
    '‡∏à‡∏î‡∏à‡∏≥‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÇ‡∏ï‡πâ‡∏ï‡∏≠‡∏ö',
    '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î',
    '‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥',
    '‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
    '‡∏£‡∏±‡∏ö‡∏°‡∏∑‡∏≠‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö'
  ]
};

// Generate unlimited scenarios
const generateRandomScenario = (): string => {
  const context = scenarioTemplates.contexts[Math.floor(Math.random() * scenarioTemplates.contexts.length)];
  const task = scenarioTemplates.tasks[Math.floor(Math.random() * scenarioTemplates.tasks.length)];
  const system = scenarioTemplates.systems[Math.floor(Math.random() * scenarioTemplates.systems.length)];
  const challenge = scenarioTemplates.challenges[Math.floor(Math.random() * scenarioTemplates.challenges.length)];

  const templates = [
    `${system} ‡∏Å‡∏≥‡∏•‡∏±‡∏á${task}‡∏Å‡∏±‡∏ö${context} ‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏≠‡∏±‡∏•‡∏Å‡∏≠‡∏£‡∏¥‡∏ó‡∏∂‡∏°‡πÑ‡∏´‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠${challenge}?`,
    `‡πÄ‡∏°‡∏∑‡πà‡∏≠${context}‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ ${system} ${task} ‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡πâ‡∏≠‡∏á${challenge} ‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡πÑ‡∏´‡∏ô?`,
    `‡∏£‡∏∞‡∏ö‡∏ö${system}‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£${challenge}‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö${context}‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á${task} ‡∏≠‡∏±‡∏•‡∏Å‡∏≠‡∏£‡∏¥‡∏ó‡∏∂‡∏°‡πÑ‡∏´‡∏ô‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°?`,
    `${context}‡πÉ‡∏ä‡πâ${system}‡πÄ‡∏û‡∏∑‡πà‡∏≠${task}‡πÅ‡∏ï‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏ö${challenge} ‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏≠‡∏±‡∏•‡∏Å‡∏≠‡∏£‡∏¥‡∏ó‡∏∂‡∏°‡πÑ‡∏´‡∏ô?`,
    `‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà${system}‡∏ï‡πâ‡∏≠‡∏á${challenge}‡πÄ‡∏°‡∏∑‡πà‡∏≠${context}${task} ‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏±‡∏•‡∏Å‡∏≠‡∏£‡∏¥‡∏ó‡∏∂‡∏°‡πÅ‡∏ö‡∏ö‡πÑ‡∏´‡∏ô?`
  ];

  return templates[Math.floor(Math.random() * templates.length)];
};

export default function AlgorithmGame() {
  const { user } = useAuth();
  const {
    currentPlayer,
    currentSession,
    leaderboards,
    topPlayers,
    zoneChampions,
    championshipEnabled,
    loading: gameDataLoading,
    initializePlayer,
    initializeSession,
    updateSession
  } = useGameData();

  const [gameStats, setGameStats] = useState<GameStats>({
    score: 0,
    correctAnswers: 0,
    totalQuestions: 0,
    currentStreak: 0,
    bestStreak: 0,
  });
  
  const [selectedCategory, setSelectedCategory] = useState('all');
  const [currentScenario, setCurrentScenario] = useState('');
  const [selectedAlgorithm, setSelectedAlgorithm] = useState<string | null>(null);
  const [showResult, setShowResult] = useState(false);
  const [isCorrect, setIsCorrect] = useState(false);
  const [gameMode, setGameMode] = useState<'study' | 'quiz' | 'leaderboard'>('study');

  const filteredAlgorithms = selectedCategory === 'all' 
    ? algorithms 
    : algorithms.filter(algo => algo.category === selectedCategory);

  const generateNewScenario = () => {
    const newScenario = generateRandomScenario();
    setCurrentScenario(newScenario);
    setSelectedAlgorithm(null);
    setShowResult(false);
  };

  const handleAlgorithmSelect = async (algorithmId: string) => {
    if (gameMode === 'study') {
      setSelectedAlgorithm(algorithmId);
      return;
    }

    // Quiz mode - Enhanced scoring logic
    setSelectedAlgorithm(algorithmId);
    
    const algorithm = algorithms.find(a => a.id === algorithmId);
    const scenarioLower = currentScenario.toLowerCase();
    let correct = false;

    // More sophisticated matching logic based on keywords and context
    const keywordMatches = {
      reinforcement: ['‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏à‡∏≤‡∏Å', '‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á', 'feedback', '‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå', '‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à', '‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô'],
      symbolic: ['‡∏à‡∏î‡∏à‡∏≥', '‡∏Å‡∏é', '‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢', 'compliance', 'logic', 'case-based', '‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á'],
      supervised: ['‡∏à‡∏≥‡πÅ‡∏ô‡∏Å', '‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó', '‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå', '‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì', '‡πÅ‡∏¢‡∏Å‡πÅ‡∏¢‡∏∞', '‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå'],
      nlp: ['‡πÅ‡∏õ‡∏•', '‡∏†‡∏≤‡∏©‡∏≤', '‡∏™‡∏ô‡∏ó‡∏ô‡∏≤', '‡πÄ‡∏™‡∏µ‡∏¢‡∏á', '‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°', '‡∏ö‡∏£‡∏¥‡∏ö‡∏ó', '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢'],
      'bio-edge': ['‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß', '‡∏Å‡∏é‡∏´‡∏°‡∏≤‡∏¢', 'monitor', '‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û', '‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î', 'edge', 'mobile']
    };

    // Check if scenario contains keywords related to the selected algorithm's category
    if (algorithm && keywordMatches[algorithm.category as keyof typeof keywordMatches]) {
      const categoryKeywords = keywordMatches[algorithm.category as keyof typeof keywordMatches];
      correct = categoryKeywords.some(keyword => scenarioLower.includes(keyword));
      
      // Additional bonus points for exact system matches
      if (scenarioLower.includes('deeja') && algorithm.category === 'nlp') correct = true;
      if (scenarioLower.includes('context engine') && algorithm.category === 'symbolic') correct = true;
      if (scenarioLower.includes('memory') && algorithm.category === 'symbolic') correct = true;
      if (scenarioLower.includes('pdf') && algorithm.category === 'nlp') correct = true;
      if (scenarioLower.includes('spreadsheet') && algorithm.category === 'supervised') correct = true;
    }

    setIsCorrect(correct);
    setShowResult(true);
    
    const newStats = {
      ...gameStats,
      totalQuestions: gameStats.totalQuestions + 1,
      correctAnswers: gameStats.correctAnswers + (correct ? 1 : 0),
      score: gameStats.score + (correct ? 10 : 0),
      currentStreak: correct ? gameStats.currentStreak + 1 : 0,
      bestStreak: correct ? Math.max(gameStats.bestStreak, gameStats.currentStreak + 1) : gameStats.bestStreak,
    };
    
    setGameStats(newStats);

    // Update database session if player is set up
    if (currentSession && algorithm) {
      await updateSession(
        correct,
        algorithm.category,
        newStats.currentStreak,
        newStats.totalQuestions,
        newStats.correctAnswers
      );
    }
  };

  const handlePlayerSetup = async (displayName: string, isAi: boolean, aiDescription?: string) => {
    const player = await initializePlayer(displayName, isAi, aiDescription);
    if (player) {
      await initializeSession();
    }
  };

  useEffect(() => {
    generateNewScenario();
  }, []);

  const getCategoryIcon = (categoryId: string) => {
    const category = categories.find(c => c.id === categoryId);
    return category?.icon || Brain;
  };

  const getCategoryColor = (categoryId: string) => {
    switch (categoryId) {
      case 'reinforcement': return 'bg-red-500';
      case 'symbolic': return 'bg-purple-500';
      case 'supervised': return 'bg-blue-500';
      case 'nlp': return 'bg-green-500';
      case 'bio-edge': return 'bg-orange-500';
      default: return 'bg-gray-500';
    }
  };

  return (
    <div className="container mx-auto p-6 space-y-6">
      <div className="text-center space-y-4">
        <h1 className="text-4xl font-bold bg-gradient-to-r from-primary to-primary/60 bg-clip-text text-transparent">
          üß† Zynx Algorithm Game
        </h1>
        <p className="text-lg text-muted-foreground">
          ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏≠‡∏±‡∏•‡∏Å‡∏≠‡∏£‡∏¥‡∏ó‡∏∂‡∏° AI ‡∏ú‡πà‡∏≤‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô Zynx CaaS Platform (‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÑ‡∏°‡πà‡∏à‡∏≥‡∏Å‡∏±‡∏î!)
        </p>
      </div>

      {/* Game Stats */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Trophy className="h-5 w-5" />
            ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-2 md:grid-cols-5 gap-4">
            <div className="text-center">
              <div className="text-2xl font-bold text-primary">{gameStats.score}</div>
              <div className="text-sm text-muted-foreground">‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô</div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold">{gameStats.correctAnswers}/{gameStats.totalQuestions}</div>
              <div className="text-sm text-muted-foreground">‡∏ñ‡∏π‡∏Å/‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold text-green-600">{gameStats.currentStreak}</div>
              <div className="text-sm text-muted-foreground">‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á</div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold text-yellow-600">{gameStats.bestStreak}</div>
              <div className="text-sm text-muted-foreground">‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î</div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold">
                {gameStats.totalQuestions > 0 ? Math.round((gameStats.correctAnswers / gameStats.totalQuestions) * 100) : 0}%
              </div>
              <div className="text-sm text-muted-foreground">‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥</div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Show player setup if not authenticated or no current player */}
      {!user ? (
        <Card className="max-w-md mx-auto">
          <CardHeader className="text-center">
            <CardTitle>‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏Å‡∏°</CardTitle>
            <CardDescription>
              ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô
            </CardDescription>
          </CardHeader>
        </Card>
      ) : !currentPlayer ? (
        <PlayerSetup onPlayerCreated={handlePlayerSetup} loading={gameDataLoading} />
      ) : (
        <>
          {/* Game Mode Selector */}
          <Tabs value={gameMode} onValueChange={(value) => setGameMode(value as 'study' | 'quiz' | 'leaderboard')} className="w-full">
            <TabsList className="grid w-full grid-cols-3">
              <TabsTrigger value="study">‡πÇ‡∏´‡∏°‡∏î‡∏®‡∏∂‡∏Å‡∏©‡∏≤</TabsTrigger>
              <TabsTrigger value="quiz">‡πÇ‡∏´‡∏°‡∏î‡∏ó‡∏î‡∏™‡∏≠‡∏ö</TabsTrigger>
              <TabsTrigger value="leaderboard">
                <Crown className="h-4 w-4 mr-2" />
                ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö
              </TabsTrigger>
            </TabsList>

        <TabsContent value="study" className="space-y-6">
          {/* Category Filter */}
          <Card>
            <CardHeader>
              <CardTitle>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏≠‡∏±‡∏•‡∏Å‡∏≠‡∏£‡∏¥‡∏ó‡∏∂‡∏°</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="flex flex-wrap gap-2">
                {categories.map((category) => {
                  const Icon = category.icon;
                  return (
                    <Button
                      key={category.id}
                      variant={selectedCategory === category.id ? "default" : "outline"}
                      onClick={() => setSelectedCategory(category.id)}
                      className="flex items-center gap-2"
                    >
                      <Icon className="h-4 w-4" />
                      {category.name}
                    </Button>
                  );
                })}
              </div>
            </CardContent>
          </Card>

          {/* Algorithms Grid */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            {filteredAlgorithms.map((algorithm) => (
              <Card 
                key={algorithm.id}
                className={`cursor-pointer transition-all hover:shadow-lg ${
                  selectedAlgorithm === algorithm.id ? 'ring-2 ring-primary' : ''
                }`}
                onClick={() => handleAlgorithmSelect(algorithm.id)}
              >
                <CardHeader className="pb-3">
                  <div className="flex items-center justify-between">
                    <CardTitle className="text-lg flex items-center gap-2">
                      <span className="text-2xl">{algorithm.icon}</span>
                      {algorithm.name}
                    </CardTitle>
                    <Badge variant={algorithm.difficulty === 'easy' ? 'default' : algorithm.difficulty === 'medium' ? 'secondary' : 'destructive'}>
                      {algorithm.difficulty}
                    </Badge>
                  </div>
                  <CardDescription>{algorithm.description}</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="space-y-3">
                    <div className={`h-1 w-full rounded ${getCategoryColor(algorithm.category)}`} />
                    <p className="text-sm text-muted-foreground font-medium">üéØ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÉ‡∏ô Zynx:</p>
                    <p className="text-sm">{algorithm.zynxScenario}</p>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </TabsContent>

        <TabsContent value="quiz" className="space-y-6">
          {/* Quiz Scenario */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center justify-between">
                üéØ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏à‡∏≥‡∏•‡∏≠‡∏á (‡πÑ‡∏°‡πà‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°)
                <Button onClick={generateNewScenario} variant="outline" size="sm">
                  <Shuffle className="h-4 w-4 mr-2" />
                  ‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÉ‡∏´‡∏°‡πà
                </Button>
              </CardTitle>
            </CardHeader>
            <CardContent>
              <p className="text-lg leading-relaxed">{currentScenario}</p>
              {showResult && (
                <div className={`mt-4 p-4 rounded-lg border ${isCorrect ? 'bg-green-50 border-green-200' : 'bg-red-50 border-red-200'}`}>
                  <div className="flex items-center gap-2">
                    {isCorrect ? <CheckCircle className="h-5 w-5 text-green-600" /> : <XCircle className="h-5 w-5 text-red-600" />}
                    <span className={`font-semibold ${isCorrect ? 'text-green-800' : 'text-red-800'}`}>
                      {isCorrect ? '‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á! üéâ' : '‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏´‡∏ô‡πâ‡∏≤! üí™'}
                    </span>
                  </div>
                  {selectedAlgorithm && (
                    <p className="mt-2 text-sm">
                      ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: <strong>{algorithms.find(a => a.id === selectedAlgorithm)?.name}</strong>
                    </p>
                  )}
                  <p className="mt-2 text-xs text-muted-foreground">
                    üí° ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° "‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÉ‡∏´‡∏°‡πà" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
                  </p>
                </div>
              )}
            </CardContent>
          </Card>

          {/* Algorithm Options */}
          <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-3">
            {algorithms.map((algorithm) => (
              <Button
                key={algorithm.id}
                variant={selectedAlgorithm === algorithm.id ? "default" : "outline"}
                onClick={() => handleAlgorithmSelect(algorithm.id)}
                disabled={showResult}
                className="h-auto p-4 text-left flex flex-col items-start gap-2"
              >
                <div className="flex items-center gap-2 w-full">
                  <span className="text-lg">{algorithm.icon}</span>
                  <span className="font-semibold text-sm">{algorithm.name}</span>
                </div>
                <Badge variant="outline" className="text-xs">
                  {categories.find(c => c.id === algorithm.category)?.name}
                </Badge>
              </Button>
            ))}
          </div>
        </TabsContent>

        <TabsContent value="leaderboard" className="space-y-6">
          <Leaderboard 
            topPlayers={topPlayers}
            zoneChampions={zoneChampions}
            championshipEnabled={championshipEnabled}
          />
        </TabsContent>
      </Tabs>
        </>
      )}
    </div>
  );
}
